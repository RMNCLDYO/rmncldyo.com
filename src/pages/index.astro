---
import { getCollection } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import Socials from "@/components/Socials.astro";
import LinkButton from "@/components/LinkButton.astro";
import Card from "@/components/Card.astro";
import Hr from "@/components/Hr.astro";
import getSortedPosts from "@/utils/getSortedPosts";
import IconRss from "@/assets/icons/IconRss.svg";
import IconArrowRight from "@/assets/icons/IconArrowRight.svg";
import { SITE } from "@/config";
import { SOCIALS } from "@/constants";

const posts = await getCollection("blog");

const sortedPosts = getSortedPosts(posts);
const featuredPosts = sortedPosts.filter(({ data }) => data.featured);
const recentPosts = sortedPosts.filter(({ data }) => !data.featured);
---

<Layout>
  <Header />
  <main id="main-content" data-layout="index">
    <section id="hero" class="pt-8 pb-6">
      <h1 class="my-4 inline-block text-4xl font-bold sm:my-8 sm:text-5xl">
        [about.ray]
      </h1>
      <a
        target="_blank"
        href="/rss.xml"
        class="inline-block"
        aria-label="rss feed"
        title="RSS Feed"
      >
        <IconRss
          width={20}
          height={20}
          class="scale-125 stroke-accent stroke-3 rtl:-rotate-90"
        />
        <span class="sr-only">RSS Feed</span>
      </a>

      <p>
        I'm Ray. A software developer who believes in building useful tools and
        sharing them with the community. I write code that I'd want to use
        myself, and I try to make it as clean and accessible as possible. Here
        you'll find my open source projects, technical deep-dives, and practical
        insights from building software in public. Whether you're looking for
        tools to streamline your workflow or curious about the lessons I've
        learned along the way, this is where I share it all.
      </p>

      <div id="thinking" class="my-4 font-mono text-sm text-muted">
        Thinking<span id="dots">...</span> (<span id="timer">0</span>s 路 <span
          id="tokens">0</span
        > tokens 路 esc to interrupt)
      </div>

      {
        // only display if at least one social link is enabled
        SOCIALS.length > 0 && (
          <div class="mt-4 flex flex-col sm:flex-row sm:items-center">
            <div class="me-2 mb-1 whitespace-nowrap sm:mb-0">Social Links:</div>
            <Socials />
          </div>
        )
      }
    </section>

    <Hr />

    {
      featuredPosts.length > 0 && (
        <>
          <section id="featured" class="pt-12 pb-6">
            <h2 class="text-2xl font-semibold tracking-wide">
              [rays.thoughts-ideas-and-rants]
            </h2>
            <ul>
              {featuredPosts.map(data => (
                <Card variant="h3" {...data} />
              ))}
            </ul>
          </section>
          {recentPosts.length > 0 && <Hr />}
        </>
      )
    }

    {
      recentPosts.length > 0 && (
        <section id="recent-posts" class="pt-12 pb-6">
          <h2 class="text-2xl font-semibold tracking-wide">Recent Posts</h2>
          <ul>
            {recentPosts.map(
              (data, index) =>
                index < SITE.postPerIndex && <Card variant="h3" {...data} />
            )}
          </ul>
        </section>
      )
    }

    <div class="my-8 text-center">
      <LinkButton href="/posts/">
        i'd like more please, thanks
        <IconArrowRight class="inline-block rtl:-rotate-180" />
      </LinkButton>
    </div>
  </main>
  <Footer />
</Layout>

<script>
  document.addEventListener("astro:page-load", () => {
    const indexLayout = (document.querySelector("#main-content") as HTMLElement)
      ?.dataset?.layout;
    if (indexLayout) {
      sessionStorage.setItem("backUrl", "/");
    }

    const dots = document.querySelector("#dots");
    const timer = document.querySelector("#timer");
    const tokens = document.querySelector("#tokens");
    const thinkingDiv = document.querySelector("#thinking");
    let seconds = 0;
    let tokenCount = 0;
    let dotCount = 0;
    let timerInterval: number;
    let dotsInterval: number;
    let tokensInterval: number;
    let escapeTimeout: number;
    let isShowingMessage = false;

    function startAnimation() {
      seconds = 0;
      tokenCount = 0;
      dotCount = 0;
      isShowingMessage = false;

      thinkingDiv.innerHTML =
        'Thinking<span id="dots">...</span> (<span id="timer">0</span>s 路 <span id="tokens">0</span> tokens 路 esc to interrupt)';

      const newDots = document.querySelector("#dots");
      const newTimer = document.querySelector("#timer");
      const newTokens = document.querySelector("#tokens");

      timerInterval = setInterval(() => {
        seconds++;
        if (newTimer) newTimer.textContent = seconds.toString();
      }, 1000);

      dotsInterval = setInterval(() => {
        dotCount = (dotCount + 1) % 4;
        if (newDots) newDots.textContent = ".".repeat(dotCount || 1);
      }, 500);

      tokensInterval = setInterval(() => {
        const increment = Math.floor(Math.random() * 6) + 3;
        tokenCount += increment;
        if (newTokens) newTokens.textContent = tokenCount.toLocaleString();
      }, 50);
    }

    if (thinkingDiv) {
      startAnimation();

      document.addEventListener("keydown", event => {
        if (event.key === "Escape") {
          if (isShowingMessage) {
            clearTimeout(escapeTimeout);
            clearInterval(timerInterval);
            clearInterval(dotsInterval);
            clearInterval(tokensInterval);
            startAnimation();
          } else {
            isShowingMessage = true;
            clearInterval(timerInterval);
            clearInterval(dotsInterval);
            clearInterval(tokensInterval);
            thinkingDiv.textContent =
              "ERROR: Ray cant stop thinking, please try again later...";

            escapeTimeout = setTimeout(() => {
              startAnimation();
            }, 3000);
          }
        }
      });
    }
  });
</script>
